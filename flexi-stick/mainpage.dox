/*!

\mainpage FlexiStick -- flexible stick reading & data writing

\section intro Introduction

The FlexiStick module provides a generic utility for reading joysticks
detected by SDL. The data from joysticks may be converted by simple
means (polynomial scaling, stepping, counting), and written to any
user-selected channel. The module is DUECA 2 only (requires 2.2.4 or
higher) and uses generic DUECA Communication Object (DCO) writing
available in DUECA 2. This way of writing will have slightly more
run-time overhead than a custom-written joystick reading and channel
writing module, but for normal set-ups this will be negligible.

\section principle Working Principle

Low-budget simulations, and most testing environments will typically
use joystick class devices to provide the necessary control
inputs. The SDL (2) library provides interfaces to these devices in a
platform-independent manner, and this module uses that library.

\subsection{Device reading}

SDL sees a joystick or steering wheel or similar device as a
collection of axes (providing a value depending on movement), hats
(providing up, down, left, right and possible combinations of these),
buttons (providing pressed and released) and trackballs. With the
exception of trackballs, all these elements of a joystick or device
can be read by the module.

As you specify that you want to read a joystick device, you need to
give this device a name and tell the FlexiStick module you want to
read it. Devices in SDL are numbered, and if the device has number 0,
you can add it by:

\code
        'add-device "mywheel:0"
\endcode

All the axes, hats and buttons of the device are then accessible in
the FlexiStick module by means of the name of this device, so if you
attached a steering wheel, having two axes, two buttons and a hat, and
you call it "mywheel" the variables produced by this wheel are known
as:

\code
"mywheel.a[0]"  ;; the steering wheel
"mywheel.a[1]"  ;; gear shift
"mywheel.b[0]"  ;; first button
"mywheel.b[1]"  ;; second button
"mywheel.h[0]"  ;; the hat
\endcode

The axis value will be a float from -1 to 1, with 0 typically
expressing the neutral value. The button value is a boolean, and the
hat value is a collection of bits in an integer, following SDL's
conventions for hat values.

You can also refer to the hat with the letters "u", "d", "l" and "r",
for up, down, left, right, respectively. Then the value will be
boolean, for example "mywheel.u[0]" returns true whenever the hat is
up, including up-left and up-right positions.

\subsection{Simple transformations}

In many cases it is desireable to scale the input of the joystick or a
similar device. A number of simple transformations is possible, let's
say that the wheel axis -1 to 1 range corresponds to -240 to 240
degrees, and you want these values as degrees in you simulator. Using
a polynomial scaler, you can add a new variable:

\code
       'create-poly "dw" "mywheel.a[0]"
       'poly-params 0.0 240.0
\endcode

This now adds a new variable "dw" to a pool of variables which
previously only had the values produced by the steering wheel. In
addition to polynomial scaling there is a step converter, which takes
input values and output value pairs, and returns the output value
corresponding to the input value closest to the measured input.

The following hypothetical example converts the measured value to gear
shift positions:
\code
      'create-steps "gear" "mywheel.a[1]"
      'steps-params -1.0 -1
                    -0.5 0
                    -0.0 1
                     0.5 2
                     1.0 3
\endcode

\subsection{Output}

The FlexiStick module can also write floating point, integer and
boolean values into a DCO object of your choice. For this, you need to
specify the class of the DCO object and the name of the channel.

\code
       'add-channel "carcontrol" "CarInput://mysim" "CarInput"
                    "input from wheel"
\endcode

This creates a channel variable "carcontrol", which is written to the
channel "CarInput://mysim". The class of objects written there is
"CarInput", so you need to have a CarInput.dco file defining this
variable. The label on the channel entry will be "input from wheel".

Then connect the variables available in the FlexiStick module, either use
the raw stick values or converted values, to fill the members of the
DCO object, as an example:

\code
        'add-link "carcontrol.dw" "dw"
        'add-link "carcontrol.gear" "gear"
        'add-link "carcontrol.turnleft" "mywheel.b[0]"
        'add-link "carcontrol.turnright" "mywheel.b[1]"
\endcode

Note that the first links use a converted value, while the second two
directly use the data generated by the device.

\section use Use

The module can be fully configured from the dueca.mod script. See @ref
FlexiStick for more details.

*/
